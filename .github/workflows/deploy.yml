on:
  push:
    branches:
      - master
name: Deploy DevOps page
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      BRANCH_NAME: ${{ github.head_ref }}
    steps:
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.8
      - uses: actions/checkout@v2
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ steps.previoustag.outputs.tag }}
#
#      - uses: actions/cache@v1
#        with:
#          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
#          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-yarn-
#
#      - name: Install Dependencies
#        run: yarn
#      - name: Build Site
#        run: yarn build
#      - name: 'Terraform Init'
#        uses: hashicorp/setup-terraform@v1
#        with:
#          tf_actions_version: 0.14.8
#          tf_actions_subcommand: 'init'
#          args:
#            -backend-config="bucket=terraform-my-service-state"
#            -backend-config="key=terraform-prod.tfstate"
#            -backend-config="dynamodb_table=terraform-my-service-state-prod"
#            -backend-config="encrypt=true"
#      - name: 'Terraform Plan'
#        uses: hashicorp/setup-terraform@v1
#        with:
#          tf_actions_version: 0.14.8
#          tf_actions_subcommand: 'plan'
#          args:
#            -var="is_temp_env=true"
#            -var="env_prefix=prod"
#            -var="max_ec2_instances=1"
#            -var="min_ec2_instances=1"
#            -var="mysql_username=root"
#            -var="mysql_password={{ secrets.DB_PASSWORD }}"
#      - name: 'Terraform Apply'
#        uses: hashicorp/setup-terraform@v1
#        with:
#          tf_actions_version: 0.14.8
#          tf_actions_subcommand: 'apply'
#          args: 'tf.plan'
#      - name: sync to s3
#        run: aws s3 sync public s3://terraform-my-service-state
#      - name: invalidate cloudfront cache
#        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths="/*"