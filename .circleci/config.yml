# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
defaults:
  docker_login: &docker_login
    run:
      name: Login to Dockerhub
      command: |
        if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
            echo "Skipping Login to Dockerhub, no credentials."
        else
            echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
        fi
jobs:
  build:
    context:
      - DOCKERHUB
    environment:
      IMAGE_NAME: behoof4mind/devops-page
    docker:
      # specify the version
      - image: circleci/golang:1.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - run:
          name: check vars
          command: |
            echo $DOCKER_USER
            echo $DOCKER_PASS
      - checkout
      - setup_remote_docker
      # specify any bash command here prefixed with `run: `
      - run:
          name: Build docker image
          command: |
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
            docker build -t $IMAGE_NAME:$IMAGE_TAG .
      - *docker_login
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
            echo "${DOCKER_PASS}" | docker login --username "${DOCKER_USER}" --password-stdin
            docker tag $IMAGE_NAME $IMAGE_NAME:$IMAGE_TAG
            docker tag $IMAGE_NAME $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
